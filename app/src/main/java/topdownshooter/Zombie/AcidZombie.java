/*
 * @file AcidZombie.java
 * @brief This file defines the `AcidZombie` class.
 * 
 * The `AcidZombie` class extends `AbstractZombie`.
 * It implements the required behavior for drawing and representing itself
 * in the game world.
 * 
 * Created on Wed Mar 19 2025
 *
 * @copyright MIT License
 *
 * Copyright (c) 2025 Mert LIMONCUOGLU
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package topdownshooter.Zombie;

import java.awt.*;
import java.util.Random;

import topdownshooter.Core.ConfigHandler.ZombieProperties;
import topdownshooter.Weapon.Projectiles.AcidSpit;
import topdownshooter.Core.Globals;
import topdownshooter.Core.RectangleBound;
import topdownshooter.Core.SpriteAnimation;

/**
 * @class AcidZombie
 * @brief Represents a Acid Zombie in the game.
 *
 * The `AcidZombie` class is a type of zombie that has ranged attack with its toxic spit. 
 * This class handles drawing the zombie and providing information about its state.
 */
public class AcidZombie extends AbstractZombie {
    private final int SPIT_RANGE = 500;
    private final double MAX_SPREAD_ANGLE_DEG = 5;  // Spead Angle of Toxic Spit In degree
    public static final int EFFECTIVE_RANGE = 200;  // Effective Range of Exposion (After the zombie killed) In Pixels

    private static Random random = new Random(); // Reuse random instance

    public AcidZombie(ZombieProperties properties, int x, int y) {
        super(properties);
        this.x = x;
        this.y = y;
        this.type = ZombieType.ACID;

        this.spriteAnimation = new SpriteAnimation(Globals.ACID_ZOMBIE_MOVE);
        this.spriteAnimation.setTargetSize(WIDTH, HEIGHT);
    }

    @Override
    public void draw(Graphics g) {
        this.spriteAnimation.draw(g, this.x, this.y, this.r);
    }

    public AcidSpit rangedAttack() {
        int val = random.nextInt(Globals.Time2GameTick(1000));
        // There is a probability of 1 percent of ranged attack generated by the zombie per Game Tick
        if (val < Globals.Time2GameTick(10)) {
            double translatedX = this.x + WIDTH / 2 + this.spriteAnimation.getOffset().getX() * Math.cos(this.r) - this.spriteAnimation.getOffset().getY() * Math.sin(this.r);
            double translatedY = this.y + HEIGHT / 2 + this.spriteAnimation.getOffset().getX() * Math.sin(this.r) + this.spriteAnimation.getOffset().getY() * Math.cos(this.r);

            // Give some randomness for ranged attack of the acid zombie
            double spreadAngle = random.nextDouble(MAX_SPREAD_ANGLE_DEG) - (MAX_SPREAD_ANGLE_DEG / 2.0);  // In degree
            return new AcidSpit((int) translatedX, (int) translatedY, this.r + Globals.degToRad(spreadAngle), (int) (this.damage*0.5));  // Ranged attacks only gives half damage
        }
        return null;
    }

    @Override
    public void update(RectangleBound playerBounds) {
        // Try to catch the player
        int playerX = (int) playerBounds.getX();
        int playerY = (int) playerBounds.getY();

        // If objects collided, which means zombie catched the player, do not update position of the zombie
        int dx = playerX - this.x;
        int dy = playerY - this.y;
            
        // Need to normalize speed according to the speed vector
        double distance = Math.sqrt(dx * dx + dy * dy);

        // If distance is bigger than spit range, try to catch the player
        if (distance > SPIT_RANGE) {
            int normalizedSpeedX = 0, normalizedSpeedY = 0;
            if (distance != 0) {
                normalizedSpeedX = (int) (this.speed * Math.abs((double) dx / distance));
                normalizedSpeedY = (int) (this.speed * Math.abs((double) dy / distance));
            }

            if (this.x < playerX) this.x += normalizedSpeedX;
            if (this.x > playerX) this.x -= normalizedSpeedX;
            if (this.y < playerY) this.y += normalizedSpeedY;
            if (this.y > playerY) this.y -= normalizedSpeedY;    
        } else { }
        
        // Rotate the zombie towards player
        if (distance > 0) this.r = Math.atan2(dy, dx);

        // Update sprite animation
        this.spriteAnimation.update();
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("AcidZombie{");
        sb.append("x=" + this.x + ", ");
        sb.append("y=" + this.y + ", ");
        sb.append("r=" + this.r + ", ");
        sb.append("health=" + this.health + ", ");
        sb.append("speed=" + this.speed + ", ");
        sb.append("damage=" + this.damage + ", ");
        sb.append("points=" + this.points + ", ");
        sb.append("type=" + this.type);
        sb.append("}");

        return sb.toString();
    }
}
